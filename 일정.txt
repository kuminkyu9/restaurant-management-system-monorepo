총 개발기간: 21일 (8/25~9/14)
일일 투입시간: 4시간 (학습 1시간 + 개발 3시간)
교재: Node.js 교과서 개정3판 병행 학습

📅 상세 일정 (학습 + 개발 통합)
Week 1: 설계 & 백엔드 기초 (8/25~8/31)
	8/25 (월) - Day 1: 기초 개념과 프로젝트 설계							
	📚 학습 (1시간)
		Node.js 교과서 1-3장: Node.js 개념, npm, 모듈 시스템
		4장 일부: http 모듈 기초
	💻 개발 (3시간)
		요구사항 명세서 작성 (핵심 데모 3장면 중심)
		DB 스키마 설계 (Entity 관계도)
		API 엔드포인트 목록 (15~20개)
		프로젝트 폴더 구조 설계

	📋 체크포인트: ERD 완성, API 목록 정리, Node.js 기본 개념 이해
	-
	8/26 (화) - Day 2: Express 기초와 개발환경								
	📚 학습 (1시간)
		6장: Express 웹 서버 (미들웨어, 라우터 개념)
		환경 설정 및 기본 구조
	💻 개발 (3시간)
		Docker Compose (PostgreSQL, Redis) 설정
		Node.js + Express 프로젝트 초기화
		Prisma 설정 및 스키마 작성
		기본 미들웨어 (CORS, helmet, morgan) 설정

	📋 체크포인트: npm start로 서버 구동, DB 연결 확인, Express 미들웨어 이해
	-
	8/27 (수) - Day 3: 사용자 인증 시스템									
	📚 학습 (1시간)
		9장: Express로 SNS 서비스 만들기 (사용자 인증 부분)
		10장: 웹 API 서버 - JWT 토큰 부분
	💻 개발 (3시간)
		User 모델 및 마이그레이션
		bcrypt 패스워드 해싱 (교과서 예제 참고)
		JWT Access/Refresh 토큰 로직
		회원가입/로그인 API, 인증 미들웨어

	📋 체크포인트: Postman으로 로그인→토큰 발급→보호된 API 호출 성공
	-
	8/28 (목) - Day 4: 핵심 도메인 CRUD I
	📚 학습 (1시간)
		7장: MySQL → PostgreSQL/Prisma로 응용
		9장: 데이터베이스 관계 설정 부분
	💻 개발 (3시간)
		Store 모델 및 CRUD API
		사장 권한으로만 상점 관리 가능하도록 제한
		Table, MenuItem 모델 및 CRUD API
		관계 쿼리 최적화 (N+1 방지)

	📋 체크포인트: 사장이 상점 생성→테이블 추가→메뉴 등록까지 API 완료
	-
	8/29 (금) - Day 5: QR 생성 & 손님 API
	📚 학습 (1시간)
		10장: 웹 API 서버 - API 설계 원칙, CORS
		파일 업로드 관련 부분 (QR 이미지 생성 참고)
	💻 개발 (3시간)
		QR 코드 생성 라이브러리 적용
		테이블별 고유 토큰 생성 로직
		QR 이미지 생성 및 다운로드 API
		손님용 공개 API: 매장별 메뉴 조회

	📋 체크포인트: QR 생성→스캔→메뉴 조회 플로우 완료
	-
	8/30 (토) - Day 6: 주문 시스템 I
	📚 학습 (1시간)
		9장: 트랜잭션 처리 부분
		10장: API 에러 처리 및 검증
	💻 개발 (3시간)
		Order, OrderItem 모델 설계
		주문 생성 API (트랜잭션 적용)
		가격 스냅샷 저장 로직
		멱등성 키 (Idempotency-Key) 구현

	📋 체크포인트: 손님이 메뉴 선택→주문 생성→중복 방지 확인
	-
	8/31 (일) - Day 7: 주문 시스템 II & API 정리
	📚 학습 (1시간)
		11장: 노드 서비스 테스트하기 (기본 개념)
		API 문서화 관련 내용 복습
	💻 개발 (3시간)
		직원용 주문 목록 조회 API
		주문 상태 변경 API, 권한 검증
		API 문서화 (Swagger 기본 설정)
		Postman/Insomnia 컬렉션 작성

	📋 체크포인트: 백엔드 핵심 기능 완료, API 문서 확인 가능

-----

Week 2: 실시간 & 프론트엔드 (9/1~9/7)
	9/1 (월) - Day 8: Socket.IO 실시간 알림
	📚 학습 (1시간)
		12장: 웹 소켓으로 실시간 데이터 전송 (핵심!)
		Socket.IO 사용법, 네임스페이스와 방 개념
	💻 개발 (3시간)
		Socket.IO 서버 설정 (교과서 예제 응용)
		인증된 소켓 연결 (JWT 토큰 검증)
		매장별 Room 관리, 실시간 주문 알림
		연결/재연결 처리

	📋 체크포인트: 웹 소켓 클라이언트로 실시간 이벤트 수신 확인
	-
	9/2 (화) - Day 9: React 사장 웹 I
	📚 학습 (1시간)
		9장: 프론트엔드 연동 부분 복습
		API 클라이언트 설계 패턴 학습
	💻 개발 (3시간)
		React 프로젝트 설정 (Vite + React Query + Zustand)
		라우팅 설정, 로그인/회원가입 페이지
		인증 상태 관리, API 클라이언트 설정
		보호된 라우트 구현

	📋 체크포인트: 웹에서 로그인 성공, 대시보드 접근
	-
	9/3 (수) - Day 10: React 사장 웹 II
	📚 학습 (1시간)
		9장: 파일 업로드, 이미지 처리 부분
		프론트엔드 상태 관리 패턴 복습
	💻 개발 (3시간)
		상점 관리 페이지 (생성, 수정)
		UI 컴포넌트 (Ant Design) 적용
		메뉴 관리 페이지 (CRUD)
		폼 상태 관리 (React Hook Form)

	📋 체크포인트: 사장 웹에서 메뉴 추가/수정/삭제 가능
	-
	9/4 (목) - Day 11: React Native 직원 앱 I
	📚 학습 (1시간)
		12장: 실시간 채팅 클라이언트 → 모바일 적용 방법
		Socket.IO 클라이언트 연결 부분 복습
	💻 개발 (3시간)
		기존 CLI 프로젝트 사용
		React Query + Zustand 설정
		로그인 화면, 네비게이션 설정
		UI 컴포넌트 (React Native Paper) 적용

	📋 체크포인트: 앱에서 로그인 후 주문 목록 화면 표시
	-
	9/5 (금) - Day 12: React Native 직원 앱 II
	📚 학습 (1시간)
		12장: 실시간 이벤트 처리 심화
		모바일 알림 처리 방법
	💻 개발 (3시간)
		Socket.IO 클라이언트 연결 (교과서 패턴 적용)
		실시간 주문 알림 수신
		주문 상태 변경 기능, 주문 상세 화면
		푸시 알림 또는 소리 알림

	📋 체크포인트: 손님 주문 시 직원 앱에 즉시 알림, 상태 변경 가능
	-
	9/6 (토) - Day 13: 손님 웹 I
	📚 학습 (1시간)
		9장: 퍼그와 넌적스 → React 템플릿으로 응용
		PWA 관련 내용 학습
	💻 개발 (3시간)
		손님 웹 프로젝트 (PWA 설정)
		QR 파라미터 파싱, 매장 확인 및 메뉴 조회
		장바구니 기능, 주문서 작성 화면
		모바일 친화적 UI

	📋 체크포인트: QR 스캔→메뉴 선택→장바구니 담기
	-
	9/7 (일) - Day 14: 손님 웹 II & 전체 플로우 완성
	📚 학습 (1시간)
		12장: 클라이언트 실시간 처리 복습
		에러 처리 및 UX 패턴 학습
	💻 개발 (3시간)
		주문 생성 기능 (멱등성 키 포함)
		실시간 주문 상태 업데이트 (Socket.IO)
		에러 처리 및 UX 개선
		전체 플로우 테스트 및 버그 수정

	📋 체크포인트: 전체 주문 플로우(QR→주문→알림→처리) 완료

-----

Week 3: 통합 & 완성도 (9/8~9/14)
	9/8 (월) - Day 15: 실시간 메뉴 동기화
	📚 학습 (1시간)
		13장: 실시간 경매 시스템 (복잡한 실시간 로직 참고)
		실시간 데이터 동기화 패턴
	💻 개발 (3시간)
		메뉴 변경 시 Socket.IO 이벤트 브로드캐스트
		손님 웹에서 React Query 무효화
		QR 생성/다운로드 페이지 완성
		실시간 동기화 테스트

	📋 체크포인트: 핵심 데모 3장면 모두 완료
	-
	9/9 (화) - Day 16: 안정성 강화 I
	📚 학습 (1시간)
		10장: 보안 및 에러 처리 심화
		11장: 테스트 코드 작성법
	💻 개발 (3시간)
		전역 에러 핸들러 완성 (교과서 패턴 적용)
		API 응답 포맷 통일, 입력 검증 강화
		권한 검증 강화 (매장 경계 체크)
		레이트 리밋 적용

	📋 체크포인트: 비정상 입력/권한 공격 방어 확인
	-
	9/10 (수) - Day 17: 안정성 강화 II
	📚 학습 (1시간)
		11장: 테스트 코드 작성 (유닛/통합 테스트)
		에러 로깅 및 디버깅 방법
	💻 개발 (3시간)
		주문 멱등성 완벽 구현 (교과서 트랜잭션 패턴 적용)
		동시 주문 처리 테스트, DB 트랜잭션 최적화
		실시간 연결 복구 처리
		기본 테스트 코드 작성

	📋 체크포인트: 동시 사용자 시뮬레이션으로 안정성 확인
	-
	9/11 (목) - Day 18: 성능 최적화 & 모니터링
	📚 학습 (1시간)
		11장: 성능 측정 및 최적화
		로깅 및 모니터링 부분
	💻 개발 (3시간)
		k6 부하테스트 스크립트 작성
		성능 측정 (p95, 에러율), 병목 지점 파악
		쿼리 최적화 (인덱스, N+1 제거)
		메뉴 목록 캐시 적용

	📋 체크포인트: p95 < 200ms, 에러율 < 1% 달성
	-
	9/12 (금) - Day 19: 배포 및 CI/CD
	📚 학습 (1시간)
		15장: AWS와 GCP로 배포하기
		CI/CD 파이프라인 구축 방법
	💻 개발 (3시간)
		GitHub Actions 기본 CI 설정 (교과서 참고)
		Docker 이미지 빌드 자동화
		클라우드 배포 (Render + Vercel 조합)
		배포 환경 전체 테스트

	📋 체크포인트: 배포 URL에서 전체 데모 시나리오 동작
	-
	9/13 (토) - Day 20: 최종 점검 & 트러블슈팅 정리
	📚 학습 (1시간)
		전체 교과서 핵심 내용 복습
		면접에서 자주 묻는 Node.js 개념 정리
	💻 개발 (3시간)
		전체 시나리오 재테스트, 버그 수정
		모바일 호환성 체크, UI/UX 개선
		트러블슈팅 사례 문서화 (교과서 패턴 적용 사례)
		성능 재측정

	📋 체크포인트: 버그 없이 매끄러운 데모 가능, 기술 질문 대답 준비
	-
	9/14 (일) - Day 21: 최종 완성 & 면접 준비
	📚 최종 정리 (1시간)
		Node.js 교과서 핵심 개념 → 프로젝트 적용 사례 매핑
		기술 면접 예상 질문 답변 준비
	💻 최종 마무리 (3시간)
		포트폴리오 PPT 완성 (8~12장)
		README 완성 (아키텍처, API 문서)
		데모 GIF/스크린샷 제작
		최종 배포 확인 및 면접용 데모 시나리오 연습

📊 주간별 성공 지표
Week 1 (8/25~8/31): 백엔드 API 15개 완성
✅ 사장 회원가입/로그인
✅ 상점/메뉴/테이블 CRUD
✅ QR 생성
✅ 손님 주문 생성
✅ 직원 주문 처리

Week 2 (9/1~9/7): 프론트 3개 앱 기본 동작
✅ 실시간 주문 알림
✅ 사장 웹 기본 기능
✅ 직원 앱 기본 기능
✅ 손님 웹 주문 완료

Week 3 (9/8~9/14): 전체 통합 + 배포 + 문서
✅ 실시간 메뉴 동기화
✅ 안정성/성능 확보
✅ 클라우드 배포
✅ 포트폴리오 완성

최종 목표: 9/10 오후 6시까지 면접에서 바로 시연 가능한 수준으로 완성!