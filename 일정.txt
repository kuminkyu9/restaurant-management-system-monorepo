전체 방향
목표: QR 링크로 손님 웹 주문 → 서버 저장 → 직원 앱 실시간 알림까지 작동하는 E2E 데모.
스택: Node.js + Express, PostgreSQL(Docker), Prisma, Socket.IO, React/React Native, Render/Vercel 배포.


Day 1 (9/2) 환경 준비·헬스체크													성공
작업: Node/Express 초기화, Docker로 Postgres, Prisma init, /health로 서버·DB 확인.
완료: GET /health → {"status":"ok","db":true}, Prisma Studio 접속.
교과서:
	1장 노드 시작하기: 1.1 핵심 개념(1.1.1~1.1.5), 1.4 개발 환경 설정하기(1.4.1~1.4.3).
	4장 http 서버 이해: 4.1 요청/응답, 4.2 REST와 라우팅, 4.3 쿠키·세션(개념 참고).
	6장 Express 기본: 6.1 프로젝트 시작, 6.2 자주 쓰는 미들웨어, 6.2.6 미들웨어 특성, 6.3 Router 분리.


Day 2 (9/3) 도메인 스키마 초안													성공
작업: Prisma 스키마(User, Store, Table, MenuItem, Order, OrderItem), 마이그레이션, 시드 upsert.
완료: 참조 무결성 OK, 시드 재실행 중복 없음.
교과서:
	6장 Express 구조화: 6.3 Router로 라우팅 분리, 6.2 미들웨어 체인 감각 확립.
	10장 웹 API 서버: 10.1 API 서버 이해, 10.2 프로젝트 구조 갖추기.


Day 3 (9/25) 인증/권한 기초														성공
작업: 회원가입(bcrypt)·로그인, JWT 발급/검증 미들웨어, OWNER 권한 가드.
완료: 보호 라우트 접근, 만료/오류 토큰 401, 권한 부족 403 확인.
교과서:
	6장: 6.2.6 미들웨어 특성 활용, 6.5.3 에러 처리 미들웨어로 응답 표준화.
	10장: 10.3 JWT 토큰으로 인증하기, 10.2 구조(미들웨어 배치·가드 위치).


Day 4 (9/26) 매장·메뉴 CRUD + 검증
작업: Store/MenuItem CRUD, 입력 검증(zod), 소유자 권한 미들웨어.
완료: 사장 계정으로 메뉴 추가/수정/삭제, 404/409/422 케이스 동작.
교과서:
	6장: 6.2 미들웨어, 6.3 Router, 6.5.3 에러 처리 미들웨어.
	10장: 10.1 API 설계·상태코드 철학, 10.2 프로젝트 구조.


Day 5 (9/27) 테이블·토큰·QR 링크
작업: Table CRUD, 테이블 입장 토큰(만료/재발급 규칙), “/g/:token” 손님 진입 스켈레톤.
완료: 토큰으로 매장/테이블 식별 후 메뉴 목록 응답.
교과서:
	6장: 6.3 Router 파라미터 라우트, 6.2 미들웨어 체인으로 토큰 검증.
	10장: 10.2 구조/계층화로 검증·권한 모듈화.


Day 6 (9/28) 주문 생성 I(트랜잭션·멱등성)
작업: Order/OrderItem 트랜잭션, 가격 스냅샷, Idempotency-Key 헤더로 중복 방지(같은 키·같은 본문은 이전 결과, 다른 본문은 409).
완료: 동일 장바구니 재요청 차단/재응답 규칙 검증.
교과서:
	6장: 6.5.3 에러 처리 미들웨어로 예외 일원화.	
	10장: 10.1 상태코드/에러 응답, 10.6 사용량 제한(요청 제어 개념 참고), 10.2 예외 흐름 위치.


Day 7 (9/29) 주문 상태·리스트
작업: 주문 목록/상세, 상태 변경 API, 권한·상태 전이 검증(상태 머신 제약).
완료: 상태 변경 로그, 잘못된 전이 409/422, 권한 부족 403 일관 동작.
교과서:
	6장: 6.2 미들웨어로 권한·전이 가드 재사용.
	10장: 10.1 응답/상태코드 철학, 10.2 구조화(서비스 계층에서 전이 검증).


Day 8 (9/30) 실시간 알림(서버) + RN 소켓 시작
작업: Socket.IO 서버, store:{storeId} 룸 join, order.created/updated 방송; RN socket.io-client 연결·룸 조인 로그.
완료: 테스트 클라 이벤트 수신, 끊김 후 재연결 시 룸 재조인 확인.
교과서:
	12장: 12.1 웹 소켓 이해, 12.3 Socket.IO 사용하기, 12.5 미들웨어와 소켓 연결하기.


Day 9 (10/1) 사장 웹 I + RN 리스트
작업: 사장 웹 로그인→대시보드, 주문 리스트/상태 변경 UI; RN은 수신 주문을 상태에 적재하여 FlatList 표시.
완료: 웹에서 상태 변경 시 서버 반영·리스트 실시간 갱신.
교과서:
	10장: 10.4 다른 서비스에서 호출하기(클라이언트-API 연동 사고).
	12장: 12.3 Socket.IO 이벤트 흐름, 12.5 소켓-미들웨어 연동 관점.


Day 10 (10/2) 손님 웹 I + RN 알림
작업: 손님 웹 토큰 진입→메뉴 조회→장바구니→주문 제출; RN 포그라운드 로컬 알림 및 탭 이동.
완료: 손님 주문 → RN 알림 팝업 → 상세 이동까지 실시간 확인.
교과서:
	10장: 10.7 CORS 이해하기(웹-서버 호출 설정).
	12장: 12.3 Socket.IO 이벤트 처리와 UI 반영, 12.5 소켓 인증/룸 미들웨어.


Day 11 (10/3) 통합·배포
작업: Render(백엔드)+Vercel(웹) 배포, 환경 변수/시크릿, CORS, 헬스체크, Swagger/README 초안.
완료: 배포 URL에서 손님 주문→사장 웹 갱신→RN 알림 E2E.
교과서:
	10장: 10.7 CORS, 10.6 사용량 제한(운영 기초), 10.8 프로젝트 마무리 체크리스트.
	15장: 15.1 운영 패키지(pm2, winston 등), 15.4 AWS에 배포하기(개념·체크 관점).


Day 12 (10/4) 안정화·성능 기초
작업: 전역 에러 핸들러·표준 응답, 레이트 리밋, Prisma select/include 최소화, 소켓 중복 이벤트 가드, p95/오류율 로깅.
완료: p95·오류율 메모, 병목 정리 및 반영.
교과서:
	10장: 10.6 사용량 제한, 10.2 구조 정리로 최적화 포인트 구분.
	12장: 12.5 미들웨어와 소켓 연결하기(인증·룸 가드/중복 제어).


Day 13 (10/5) 문서·데모 마감
작업: README(아키텍처/플로우/API/이벤트, Idempotency-Key 설명), 데모 스크립트, 릴리스 태그.
완료: 10분 데모(손님 주문→사장 웹→RN 알림) 리허설 통과, 단절/재연결 시나리오 포함.
교과서:
	10장: 10.8 프로젝트 마무리하기(체크리스트·핵심 정리).
	12장: 12.7 프로젝트 마무리하기(실시간 파트 정리).




추가 메모
공개 온라인 본문에서 1~8장, 15~16장은 전부 확인 가능하며, 10장·12장의 상세 절 구조는 공식 목차/서점 소개/깃허브 리포지터리로 보강 확인이 가능하다.
필요 시 Day 11 배포 파트는 15.1 운영 패키지(pm2, winston, helmet 등)와 함께 점검하면 안정성이 올라간다.




DAY11일날? 실행/배포 단계에서 CORS와 환경 변수(.env) 사용은 10.7 CORS와 함께 정리해두면 좋다.

용어 최소 설명(일정에 바로 쓰는 정의)
미들웨어: 요청→응답 중간에 끼워서 공통 작업(로그, 인증, 검증 등) 수행하는 함수 체인.
라우트: 주소/메서드별로 요청을 처리하는 함수 정의(예: GET /health).
JWT: 로그인 후 발급되는 토큰으로, 각 요청 헤더에 실어 권한을 증명하는 방식.
트랜잭션: 여러 DB 작업을 모두 성공하거나 모두 취소하여 데이터 일관성을 지키는 묶음.
멱등성 키: 같은 주문을 여러 번 눌러도 한 번만 처리되도록 하는 요청 식별 키.
룸: Socket.IO에서 특정 그룹(매장 ID 등)으로 이벤트를 묶어 보내는 논리 채널.

폴더 구조 메모
backend: docker-compose.yml(Postgres), prisma/schema.prisma, src(app.ts/routes/middlewares), .env, seed 스크립트.
docs: API 명세, 이벤트 명세, 상태 전이 다이어그램, 실행/배포 가이드.
주요 난이도 구간은 Day 6(멱등성·트랜잭션), Day 8(소켓 재연결·룸), Day 11~12(배포·관측성)이며, 해당 일자에 검증 체크리스트를 포함해 시행착오를 줄이도록 설계했다.


