restaurant-management-system/
├── docs/                 				# 문서들 
├── backend/                				# 백엔드
├── restaurant-operations-web/            	# React 사장 관리, 손님 주문 웹 
├── restaurantStaffApp/              		# React Native 직원 앱 
├── 일정.txt
└──  프로젝트 관련 내용.txt




restaurant-operations-web	(레스토랑 운영 관리)	==	사장, 손님		(웹	react)			qr 정보에는 상점id, 테이블 번호 등, 각 상점 별로 테이블 별 qr 생성 가능

	React (웹)
	클래스 이름, HTML 속성 등: 케밥 케이스가 일반적입니다.
	예시: <div class="my-header-wrap"></div>

	하지만 JSX에서는 카멜 케이스가 대부분입니다.
	예시: <div className="myHeaderWrap"></div>
	이벤트, 속성: <button onClick={...} /> (camelCase)



restaurantStaffApp	(레스토랑 직원)			==	직원			(앱	react_native)

	reactNative는 컴포넌트는 파스칼 딴거는 왠만하면 카멜케이스?













요구사항 명세서 작성		(react 웹(사장님, 손님), react native 앱(직원))

# 데모 시나리오 1: QR 주문 플로우
## 전제조건
- 사장이 웹에서 상점과 메뉴를 등록해둔 상태
- 테이블별 QR 코드가 생성되어 있음

## 시나리오 단계
1. 손님이 테이블의 QR 코드를 스마트폰으로 스캔
2. 손님 전용 웹페이지로 자동 이동 (매장명, 테이블 번호 확인)		이동시 패러미터 형식? 주소 이동해서 패러미터 값으로 테이블 번호 구분? 유저가 주소 값 수정시 처음 테이블 번호하고 if 해서 예외처리
3. 메뉴 목록 확인 (가격, 이미지, 품절 여부)		다른테이블이 주문시 품절 여부 실시간 동기화?		주문시 한번더 품절 여부 api로 확인 후 가능(2중 체크)
4. 원하는 메뉴 선택 및 수량 조정	
5. 장바구니에서 최종 확인 후 주문
6. 주문 완료 화면 및 주문번호 표시			주문번호는 하루 매장 방문주문 순서로 순차적, 주문순서목록이 있어 자기가 몇번째인지 확인해서 나올 시간 유추 가능?

## 성공 기준
- QR 스캔부터 주문 완료까지 3분 이내
- 모바일 브라우저에서 매끄러운 동작		ui는 핸드폰 최적화
- 중복 주문 방지 확인






# 데모 시나리오 2: 실시간 주문 알림
## 전제조건
- 직원이 직원 앱에 로그인한 상태
- 손님이 주문을 완료한 상황

## 시나리오 단계
1. 손님 주문 완료 시 직원 앱에 즉시 푸시 알림
2. 직원이 알림 터치 시 주문 상세 화면 이동
3. 주문 내용 확인 (메뉴, 수량, 테이블, 시간)
4. 주문 상태를 "접수 → 조리중 → 완료"로 변경		접수대기 > 접수 > 전달완료		이렇게가 더 나을듯?
5. 상태 변경 시 손님 화면에도 실시간 반영		나중엔 카톡알람? 근데 이거 하려면 오픈톡이였나? 그거 만들어야 돼는데 회사 서류 같은거 필요한걸로 알음

## 성공 기준
- 주문 발생부터 알림까지 1초 이내
- 앱이 백그라운드에 있어도 알림 수신
- 상태 변경이 즉시 손님 화면에 반영





# 데모 시나리오 3: 실시간 메뉴 동기화
## 전제조건
- 사장이 사장 웹에 로그인
- 손님이 손님 웹에서 메뉴 확인 중

## 시나리오 단계
1. 사장이 웹에서 특정 메뉴의 가격을 수정
2. 또는 메뉴를 품절로 변경
3. 수정 내용이 즉시 손님 웹 화면에 반영
4. 직원 앱에서도 동일한 정보로 업데이트

## 성공 기준
- 사장 수정부터 손님 화면 반영까지 1초 이내
- 새로고침 없이 자동 업데이트
- 여러 손님이 동시에 보고 있어도 모두 동기화











-- User 테이블 (사용자 관리)
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    role VARCHAR(20) NOT NULL, -- 'OWNER', 'STAFF'
    name VARCHAR(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Store 테이블 (상점 정보)
CREATE TABLE stores (
    id SERIAL PRIMARY KEY,
    owner_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(200) NOT NULL,
    description TEXT,
    address VARCHAR(500),
    phone VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- StaffStore 테이블 (직원-상점 연결)
CREATE TABLE staff_stores (
    id SERIAL PRIMARY KEY,
    staff_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    store_id INTEGER REFERENCES stores(id) ON DELETE CASCADE,
    hourly_wage INTEGER, -- 시급 (원)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(staff_id, store_id)
);

-- Table 테이블 (매장 테이블 관리)
CREATE TABLE tables (
    id SERIAL PRIMARY KEY,
    store_id INTEGER REFERENCES stores(id) ON DELETE CASCADE,
    name VARCHAR(50) NOT NULL, -- '1번 테이블', 'A-1' 등
    qr_token VARCHAR(255) UNIQUE NOT NULL,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- MenuItem 테이블 (메뉴 관리)
CREATE TABLE menu_items (
    id SERIAL PRIMARY KEY,
    store_id INTEGER REFERENCES stores(id) ON DELETE CASCADE,
    name VARCHAR(200) NOT NULL,
    description TEXT,
    price INTEGER NOT NULL, -- 가격 (원)
    image_url VARCHAR(500),
    category VARCHAR(100), -- '메인', '음료', '디저트' 등
    is_available BOOLEAN DEFAULT true,
    display_order INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Order 테이블 (주문 관리)
CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    store_id INTEGER REFERENCES stores(id) ON DELETE CASCADE,
    table_id INTEGER REFERENCES tables(id) ON DELETE SET NULL,
    status VARCHAR(20) DEFAULT 'PENDING', -- 'PENDING', 'COOKING', 'DONE', 'CANCELLED'
    total_amount INTEGER NOT NULL,
    customer_memo TEXT, -- 고객 요청사항
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- OrderItem 테이블 (주문 상세 항목)
CREATE TABLE order_items (
    id SERIAL PRIMARY KEY,
    order_id INTEGER REFERENCES orders(id) ON DELETE CASCADE,
    menu_item_id INTEGER REFERENCES menu_items(id) ON DELETE CASCADE,
    quantity INTEGER NOT NULL,
    unit_price INTEGER NOT NULL, -- 주문 당시 가격 (스냅샷)
    item_name VARCHAR(200) NOT NULL, -- 주문 당시 메뉴명 (스냅샷)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- IdempotencyKey 테이블 (중복 주문 방지)
CREATE TABLE idempotency_keys (
    id SERIAL PRIMARY KEY,
    key_value VARCHAR(255) UNIQUE NOT NULL,
    scope VARCHAR(50) NOT NULL, -- 'order_creation' 등
    order_id INTEGER REFERENCES orders(id),
    request_hash VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP NOT NULL
);



관계도 그리기
온라인 도구 사용: draw.io, Lucidchart, dbdiagram.io
또는 간단히 텍스트로 관계 정리:
User (1) ----> (N) Store : owner_id
User (N) <---> (N) Store : staff_stores 테이블로 다대다
Store (1) ----> (N) Table : store_id
Store (1) ----> (N) MenuItem : store_id  
Store (1) ----> (N) Order : store_id
Table (1) ----> (N) Order : table_id
Order (1) ----> (N) OrderItem : order_id
MenuItem (1) ----> (N) OrderItem : menu_item_id





api 문서 종류
# API 엔드포인트 목록

## 인증 관련 (3개)
POST   /auth/register     # 사장 회원가입
POST   /auth/login        # 로그인 (사장/직원)
POST   /auth/refresh      # 토큰 갱신

## 상점 관리 (4개)
POST   /stores            # 상점 생성 (사장)
GET    /stores/:id        # 상점 조회
PUT    /stores/:id        # 상점 정보 수정 (사장)
GET    /stores/:id/stats  # 상점 통계 (주문량, 매출)

## 직원 관리 (2개)
POST   /stores/:id/staff  # 직원 추가 (사장)
GET    /stores/:id/staff  # 직원 목록 조회 (사장)

## 테이블 관리 (3개)
POST   /stores/:id/tables # 테이블 생성 (사장)
GET    /stores/:id/tables # 테이블 목록 (사장)
PUT    /tables/:id/qr     # QR 코드 재생성 (사장)

## 메뉴 관리 (5개)
POST   /stores/:id/menu-items    # 메뉴 추가 (사장)
GET    /stores/:id/menu-items    # 메뉴 목록 (사장용)
PUT    /menu-items/:id           # 메뉴 수정 (사장)
DELETE /menu-items/:id           # 메뉴 삭제 (사장)
GET    /public/stores/:id/menu   # 메뉴 조회 (손님용, 인증 불필요)

## 주문 관리 (4개)
POST   /public/orders            # 주문 생성 (손님, 인증 불필요)
GET    /stores/:id/orders        # 주문 목록 (직원)
PUT    /orders/:id/status        # 주문 상태 변경 (직원)
GET    /orders/:id               # 주문 상세 조회

## 기타 (2개)
GET    /health                   # 서버 상태 체크
GET    /public/tables/:token     # QR 토큰으로 테이블 정보 조회

총 23개 API

