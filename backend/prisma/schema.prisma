// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//generator client {
//  provider = "prisma-client-js"
//  output   = "../generated/prisma"
//}

//datasource db {
//  provider = "postgresql"
//  url      = env("DATABASE_URL")
//}

// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  STAFF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  READY
  COMPLETED
  CANCELED
}

// name 속성 마이그레이션 실패할 수도 있어서 임시로 null가능하게함 필수로 바꿔야댐!
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String
  role         UserRole @default(OWNER)
  stores       Store[]  @relation("OwnerStores")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Store {
  id        String     @id @default(cuid())
  ownerId   String
  owner     User       @relation("OwnerStores", fields: [ownerId], references: [id], onDelete: Cascade)
  name      String
  slug      String     @unique
  tables    Table[]
  menuItems MenuItem[]
  orders    Order[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Table {
  id        String   @id @default(cuid())
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  code      String
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([storeId, code], map: "uq_table_store_code")
}

model MenuItem {
  id         String      @id @default(cuid())
  storeId    String
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  name       String
  price      Int // in KRW (won)
  sku        String
  displaySeq Int         @default(0)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  OrderItem  OrderItem[]

  @@unique([storeId, sku], map: "uq_menuitem_store_sku")
  @@index([storeId, displaySeq], map: "idx_menuitem_store_displayseq")
}

model Order {
  id            String      @id @default(cuid())
  storeId       String
  store         Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  tableId       String
  table         Table       @relation(fields: [tableId], references: [id], onDelete: SetNull)
  status        OrderStatus @default(PENDING)
  totalSnapshot Int // total price at order time
  items         OrderItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([storeId, status], map: "idx_order_store_status")
  @@index([tableId], map: "idx_order_table")
}

model OrderItem {
  id            String   @id @default(cuid())
  orderId       String
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId    String
  menuItem      MenuItem @relation(fields: [menuItemId], references: [id], onDelete: SetNull)
  nameSnapshot  String // menu name at order time
  priceSnapshot Int // menu price at order time
  qty           Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([orderId], map: "idx_orderitem_order")
}
